import THREE from "./index";
type Model = (string | THREE.Mesh | THREE.BufferGeometry | (THREE.Mesh | THREE.BufferGeometry)[] | string[]);
declare class Teager {
    scene: THREE.Scene;
    camera: THREE.Camera;
    light: THREE.Light;
    renderer: THREE.WebGLRenderer;
    control: any;
    container: HTMLElement;
    material: THREE.Material;
    selectedMaterial: THREE.Material;
    clock: THREE.Clock;
    animateId: number;
    Grid: THREE.Object3D;
    GridSize: number[];
    Axes: THREE.Object3D;
    raycaster: THREE.Raycaster;
    constructor(container?: HTMLElement, material?: THREE.Material, selectedMaterial?: THREE.Material | boolean);
    init(container?: HTMLElement, material?: THREE.Material, selectedMaterial?: THREE.Material, grid?: number[] | boolean, axes?: number | boolean): void;
    private resize;
    private render;
    private animate;
    initClickEvent(cb?: Function): void;
    selectModel(e: MouseEvent, cb?: Function): void;
    resetScene(clearModels?: Boolean): void;
    changeCameraDirection: (direction: string, callBack: Function, time?: number) => void;
    changeCameraDistance: (distance: number, callBack: Function, time?: number) => void;
    addModels(models: Model, material?: THREE.Material, center?: boolean, computePositon?: boolean): any[];
    computeModelsPosition(modelsMesh: THREE.Mesh[], computeBox?: boolean): THREE.Mesh[];
    removeModels(models: Model): boolean;
    destory(): void;
}
export default Teager;
